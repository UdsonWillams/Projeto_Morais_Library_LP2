package visao.livros;

import controlador.TableModel;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import modelo.Livro;
import modelo.Usuario;
import visao.Biblioteca;
import visao.TelaLogin;

/**
 *
 * @author UdsonWillams
 */
public class AlugarLivro extends javax.swing.JFrame {
    
        LivrosDaBiblioteca validador = new LivrosDaBiblioteca();
        int i;
        int a;
        ArrayList<Livro> teste2 = new ArrayList<Livro>();
        Livro teste = new Livro();
        Livro mudar = new Livro();
        
        Biblioteca usuariosB = new Biblioteca();       
        
        TableModel usuariosTabela = new TableModel();
        
                          
    public AlugarLivro() {        
        teste2 = validador.livros;  
        
        initComponents();
        this.setLocationRelativeTo(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        nomeLivro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        aluguelNomeUsario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        botaoAlugar = new javax.swing.JButton();
        reservarLivro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aluguel de Livros");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        nomeLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeLivroActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome do Livro: ");

        jLabel2.setText("Nome do Usario:");

        aluguelNomeUsario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aluguelNomeUsarioActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Morais Library");

        jButton1.setText("Fechar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        botaoAlugar.setText("Alugar Livros");
        botaoAlugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlugarActionPerformed(evt);
            }
        });

        reservarLivro.setText("Reservar Livro");
        reservarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservarLivroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aluguelNomeUsario, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeLivro, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(botaoAlugar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reservarLivro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(189, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(nomeLivro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(aluguelNomeUsario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(botaoAlugar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(reservarLivro)
                .addGap(26, 26, 26)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nomeLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeLivroActionPerformed
                                        
        /* int tamanhoLivros = teste2.size();                                 
                
        if (nomeLivro.getText().equals("") && aluguelNomeUsario.getText().equals("")){
            JOptionPane.showMessageDialog(null,"DIGITE VALORES VALIDOS");
        }
        
        
        /*else if(aluguelNomeUsario.getText().equals("")){
            JOptionPane.showMessageDialog(null,"DIGITE O NOME DO USUARIO");
        }*/
        /*
        else{                   
            for (i = 0; i < tamanhoLivros; i++){

                teste = teste2.get(i);                        
                               
                if (nomeLivro.getText().equals(teste.getNomeDoLivro())){                    
                    int quantidade = teste.getQuantidadeLivros();

                    if (teste.getTipoDoLivro().equals("eletronico")){
                        JOptionPane.showMessageDialog(null,"LIVRO DIGITAL, NAO PODE SER ALUGADO");
                    } 

                    else if (teste.getTipoDoLivro().equals("fisico") && quantidade > 0 && aluguelNomeUsario.getText() != ""){
                        int novaQuantidade = teste.getQuantidadeLivros() - 1;
                        teste.setQuantidadeLivros(novaQuantidade);
                        validador.livros.set(i, teste);                                                                                         
                        if (quantidade > 1){
                            JOptionPane.showMessageDialog(null,"LIVRO ALUGADO PARA " + aluguelNomeUsario.getText().toUpperCase() + " POR 7 DIAS");
                            }                        
                        else {
                            JOptionPane.showMessageDialog(null,"ULTIMO EXEMPLAR DA BIBLIOTECA ALUGADO PARA " + aluguelNomeUsario.getText().toUpperCase() + " POR 3 DIAS");
                        }                  
                    }
                    
                else {
                    JOptionPane.showMessageDialog(null,"LIVRO ESGOTADO");                        
                    }                
                }                
            }                        
        } */
    }//GEN-LAST:event_nomeLivroActionPerformed
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
           
    }//GEN-LAST:event_formComponentShown
    private void aluguelNomeUsarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aluguelNomeUsarioActionPerformed
        
    }//GEN-LAST:event_aluguelNomeUsarioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void botaoAlugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlugarActionPerformed
        int tamanhoLivros = teste2.size();
        
        String nomeUsarios;
        String nome;      
        usuariosTabela = usuariosB.tableModel;
        int tamanhoUsuarios = 2; // = usuariosTabela.
        nome = aluguelNomeUsario.getText();
        
        
        if (nomeLivro.getText().equals("") && aluguelNomeUsario.getText().equals("")){
            JOptionPane.showMessageDialog(null,"DIGITE VALORES VALIDOS");
        }
        else{                   
            for (a = 0; a < tamanhoUsuarios; a++){
                nomeUsarios = (String) usuariosTabela.getValueAt(a, NORMAL);                                
                for (i = 0; i < tamanhoLivros; i++){

                    teste = teste2.get(i);                        

                    if (nomeLivro.getText().equals(teste.getNomeDoLivro())){                    
                        int quantidade = teste.getQuantidadeLivros();

                        if (teste.getTipoDoLivro().equals("eletronico")){
                            JOptionPane.showMessageDialog(null,"LIVRO DIGITAL, NAO PODE SER ALUGADO");
                        }                        
                        else if (teste.getTipoDoLivro().equals("fisico") && quantidade > 0 && nome.equals(nomeUsarios)){
                            int novaQuantidade = teste.getQuantidadeLivros() - 1;
                            teste.setQuantidadeLivros(novaQuantidade);
                            validador.livros.set(i, teste);
                             if (quantidade > 1){
                                JOptionPane.showMessageDialog(null,"LIVRO ALUGADO PARA " + nomeUsarios.toUpperCase() + " POR 7 DIAS");
                                }                        
                            else {
                                JOptionPane.showMessageDialog(null,"ULTIMO EXEMPLAR DA BIBLIOTECA ALUGADO PARA " + nome.toUpperCase() + " POR 3 DIAS");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_botaoAlugarActionPerformed

    private void reservarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservarLivroActionPerformed
        int tamanhoLivros = teste2.size();
        String nomeUsarios;
        String nome;      
        usuariosTabela = usuariosB.tableModel;
        int tamanhoUsuarios = 2;
        nome = aluguelNomeUsario.getText();
        
                if (nomeLivro.getText().equals("") && aluguelNomeUsario.getText().equals("")){
            JOptionPane.showMessageDialog(null,"DIGITE VALORES VALIDOS");
        }
        else{                   
            for (a = 0; a < tamanhoUsuarios; a++){
                nomeUsarios = (String) usuariosTabela.getValueAt(a, NORMAL);                                
                for (i = 0; i < tamanhoLivros; i++){

                    teste = teste2.get(i);                        

                    if (nomeLivro.getText().equals(teste.getNomeDoLivro())){                    
                        int quantidade = teste.getQuantidadeLivros();

                        if (teste.getTipoDoLivro().equals("eletronico")){
                            JOptionPane.showMessageDialog(null,"LIVRO DIGITAL, NAO PODE SER RESERVADO");
                        }                        
                        else if (teste.getTipoDoLivro().equals("fisico") && quantidade > 0 && nome.equals(nomeUsarios)){
                            int novaQuantidade = teste.getQuantidadeLivros() - 1;
                            teste.setQuantidadeLivros(novaQuantidade);
                            validador.livros.set(i, teste);
                             if (quantidade > 1){
                                JOptionPane.showMessageDialog(null,"LIVRO RESERVADO PARA " + nomeUsarios.toUpperCase() + " POR 7 DIAS");
                                }                        
                            else {
                                JOptionPane.showMessageDialog(null,"ULTIMO EXEMPLAR DA BIBLIOTECA NÃO PODE SER RESERVADO");
                            }
                        }
                    }
                }
            }
        }
        
    }//GEN-LAST:event_reservarLivroActionPerformed
    public static void main(String args[]) {        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlugarLivro().setVisible(true);
            }
        });
    }        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aluguelNomeUsario;
    private javax.swing.JButton botaoAlugar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField nomeLivro;
    private javax.swing.JButton reservarLivro;
    // End of variables declaration//GEN-END:variables
}
